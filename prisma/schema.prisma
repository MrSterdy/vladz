generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WeekdayTimetable {
  weekday Int

  offset Int

  subjectLength Int
  subjectBreak  Int

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  subjects WeekdaySubject[]

  @@unique([weekday, groupId])
}

model WeekdaySubject {
  name String @db.VarChar(128)

  length Int
  break  Int

  position Int

  teacher String? @db.VarChar(256)

  classroom String? @db.VarChar(128)

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  timetable        WeekdayTimetable @relation(fields: [timetableWeekday, groupId], references: [weekday, groupId], onDelete: Cascade)
  timetableWeekday Int

  @@unique([groupId, timetableWeekday, position])
}

model DateTimetable {
  date DateTime @db.Date

  offset Int

  note String? @db.VarChar(256)

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  subjects DateSubject[]

  homeworkTexts HomeworkText[]
  homeworkFiles HomeworkFile[]

  expirationDate DateTime @db.Date @default(now())

  @@unique([groupId, date])
}

model DateSubject {
  name String @db.VarChar(128)

  length Int
  break  Int

  position Int

  teacher String? @db.VarChar(256)

  classroom String? @db.VarChar(128)

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  timetable     DateTimetable @relation(fields: [timetableDate, groupId], references: [date, groupId], onDelete: Cascade)
  timetableDate DateTime      @db.Date

  homeworkText  HomeworkText?
  homeworkFiles HomeworkFile[]

  @@unique([groupId, timetableDate, position])
}

model HomeworkText {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  timetable     DateTimetable @relation(fields: [timetableDate, groupId], references: [date, groupId], onDelete: Cascade)
  timetableDate DateTime      @db.Date

  subject         DateSubject @relation(fields: [groupId, timetableDate, subjectPosition], references: [groupId, timetableDate, position], onDelete: Cascade)
  subjectPosition Int

  text String @db.Text

  @@unique([groupId, timetableDate, subjectPosition])
}

model HomeworkFile {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  timetable     DateTimetable @relation(fields: [timetableDate, groupId], references: [date, groupId], onDelete: Cascade)
  timetableDate DateTime      @db.Date

  subject         DateSubject @relation(fields: [groupId, timetableDate, subjectPosition], references: [groupId, timetableDate, position], onDelete: Cascade)
  subjectPosition Int

  url  String @db.Text
  name String @db.VarChar(128)
  type String @db.VarChar(128)

  @@unique([groupId, timetableDate, subjectPosition, url, name, type])
}

model Subject {
  name String @db.VarChar(128)

  teacher String? @db.VarChar(256)

  classroom String? @db.VarChar(128)

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  @@unique([name, groupId])
}

model Holiday {
  startDate DateTime
  endDate   DateTime

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  @@unique([startDate, endDate, groupId])
}

model Group {
  id Int @id @default(autoincrement())

  name String @db.VarChar(64)

  inviteCode String @db.VarChar(16)

  cluster   GroupCluster? @relation(fields: [clusterId], references: [id], onDelete: Cascade)
  clusterId Int?

  users GroupUser[]

  applications GroupApplication[]

  weekdayTimetables WeekdayTimetable[]
  weekdaySubjects   WeekdaySubject[]

  dateTimetables DateTimetable[]
  dateSubjects   DateSubject[]

  subjects Subject[]

  homeworkTexts HomeworkText[]
  homeworkFiles HomeworkFile[]

  holidays Holiday[]
}

model GroupCluster {
  id Int @id @default(autoincrement())

  name String @db.VarChar(64)

  manager   User @relation(fields: [managerId], references: [id])
  managerId BigInt

  groups Group[]
}

model User {
  id BigInt @id

  firstName String @db.VarChar(128)
  lastName  String @db.VarChar(128)

  settings Json?

  role UserRole @default(USER)

  clusters     GroupCluster[]
  groups       GroupUser[]
  applications GroupApplication[]

  secret UserSecret?
}

model GroupUser {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId BigInt

  role GroupRole @default(MEMBER)

  @@id([userId, groupId])
}

model GroupApplication {
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId BigInt

  @@unique([groupId, userId])
}

model UserSecret {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId BigInt @unique

  secret String
}

enum UserRole {
  ADMIN
  HELPER
  USER
}

enum GroupRole {
  CURATOR
  MONITOR
  HELPER
  MEMBER
}
